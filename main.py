# amongus_aiogram_bot.py

import asyncio
import json
import os
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

load_dotenv()

# === Constants ===
MAPS = ["The Skeld", "MIRA HQ", "Polus", "The Airship", "Fungle"]
MODES = ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Ä—è—Ç–∫–∏", "–ú–Ω–æ–≥–æ —Ä–æ–ª–µ–π", "–ú–æ–¥—ã", "–ë–∞–≥"]
GAMES_FILE = Path("games.json")
games = {}

# === FSM States ===
class RoomState(StatesGroup):
    host = State()
    room = State()
    map = State()
    mode = State()

# === Keyboards ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="/newroom"), KeyboardButton(text="/list")],
              [KeyboardButton(text="/help"), KeyboardButton(text="/cancel")]],
    resize_keyboard=True
)

maps_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=m)] for m in MAPS] + [[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True, one_time_keyboard=True
)

modes_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=m)] for m in MODES] + [[KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True, one_time_keyboard=True
)

# === Utils ===
def save_games():
    temp = {code: {k: v for k, v in g.items() if k != "task"} for code, g in games.items()}
    with open(GAMES_FILE, "w", encoding="utf-8") as f:
        json.dump(temp, f, ensure_ascii=False, indent=2)

def load_games():
    if GAMES_FILE.exists():
        with open(GAMES_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            for code, g in data.items():
                g["task"] = asyncio.create_task(auto_delete_game(code))
                games[code] = g

async def auto_delete_game(code: str):
    try:
        await asyncio.sleep(games[code]["duration"])
        if code in games:
            del games[code]
            save_games()
    except asyncio.CancelledError:
        pass

# === Handlers ===

async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Among Us!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/newroom ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä—É–º–º—É\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=main_menu
    )

async def cmd_help(message: types.Message):
    await message.answer("üìñ –ö–æ–º–∞–Ω–¥—ã:\n/newroom ‚Äî —Å–æ–∑–¥–∞—Ç—å\n/list ‚Äî —Å–ø–∏—Å–æ–∫\n/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å\n/help ‚Äî –ø–æ–º–æ—â—å", reply_markup=main_menu)

async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

async def newroom(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    for code, g in games.items():
        if g["user_id"] == user_id:
            await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ä—É–º–º–∞ —Å –∫–æ–¥–æ–º: {hbold(code)}", parse_mode="HTML")
            return
    await state.set_state(RoomState.host)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ö–æ—Å—Ç–∞:", reply_markup=ReplyKeyboardRemove())

async def input_host(message: types.Message, state: FSMContext):
    if len(message.text) > 25:
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return
    await state.update_data(host=message.text)
    await state.set_state(RoomState.room)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤):")

async def input_room(message: types.Message, state: FSMContext):
    code = message.text.upper()
    if len(code) != 6 or not code.isalpha():
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    if code in games:
        await message.answer("–¢–∞–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:")
        return
    await state.update_data(room=code)
    await state.set_state(RoomState.map)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=maps_menu)

async def input_map(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        return await cmd_cancel(message, state)
    if message.text not in MAPS:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    await state.update_data(map=message.text)
    await state.set_state(RoomState.mode)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=modes_menu)

async def input_mode(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        return await cmd_cancel(message, state)
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É":
        await state.set_state(RoomState.map)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=maps_menu)
        return
    if message.text not in MODES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    data = await state.get_data()
    room_code = data["room"]
    if (old_task := games.get(room_code, {}).get("task")):
        old_task.cancel()
    task = asyncio.create_task(auto_delete_game(room_code))

    games[room_code] = {
        "host": data["host"],
        "room": room_code,
        "map": data["map"],
        "mode": message.text,
        "user_id": message.from_user.id,
        "duration": 4 * 60 * 60,
        "task": task
    }
    save_games()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{room_code}"),
         InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{room_code}")],
        [InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 —á–∞—Å", callback_data=f"extend:{room_code}")]
    ])

    await message.answer(
        f"üõ∏ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞ Among Us:</b>\n"
        f"üë§ –•–æ—Å—Ç: <b>{data['host']}</b>\n"
        f"üó∫ –ö–∞—Ä—Ç–∞: <b>{data['map']}</b>\n"
        f"üéÆ –†–µ–∂–∏–º: <b>{message.text}</b>\n\n"
        f"üîë –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: <b>{room_code}</b>\n"
        f"‚åõ –ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.",
        reply_markup=kb,
        parse_mode="HTML"
    )
    await state.clear()

async def list_rooms(message: types.Message):
    if not games:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç –Ω–µ—Ç.")
        return

    text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:</b>\n\n"
    buttons = []
    for code, g in games.items():
        text += f"üë§ <b>{g['host']}</b> | üó∫ <b>{g['map']}</b> | üéÆ <b>{g['mode']}</b> | üîë <code>{code}</code>\n"
        buttons.append([InlineKeyboardButton(text=code, callback_data=f"copy:{code}")])

    await message.answer(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def handle_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = callback.data

    if data.startswith("delete:"):
        code = data.split(":")[1]
        if code in games:
            if (task := games[code].get("task")):
                task.cancel()
            del games[code]
            save_games()
            await callback.message.edit_text("–ö–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")

    elif data.startswith("extend:"):
        code = data.split(":")[1]
        if code in games:
            games[code]["duration"] += 3600
            if (task := games[code].get("task")):
                task.cancel()
            games[code]["task"] = asyncio.create_task(auto_delete_game(code))
            save_games()
            await callback.message.answer(f"‚è≥ –í—Ä–µ–º—è –∫–æ–º–Ω–∞—Ç—ã <b>{code}</b> –ø—Ä–æ–¥–ª–µ–Ω–æ.", parse_mode="HTML")

    elif data.startswith("copy:"):
        code = data.split(":")[1]
        if code in games:
            g = games[code]
            await callback.message.answer(
                f"üìã <b>–ö–æ–ø–∏—è –∫–æ–º–Ω–∞—Ç—ã:</b>\n"
                f"üë§ –•–æ—Å—Ç: <b>{g['host']}</b>\n"
                f"üó∫ –ö–∞—Ä—Ç–∞: <b>{g['map']}</b>\n"
                f"üéÆ –†–µ–∂–∏–º: <b>{g['mode']}</b>\n"
                f"üîë –ö–æ–¥: <code>{code}</code>",
                parse_mode="HTML"
            )

# === Entry point ===

async def main():
    load_games()
    bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, F.text == "/start")
    dp.message.register(cmd_help, F.text == "/help")
    dp.message.register(cmd_cancel, F.text == "/cancel")
    dp.message.register(newroom, F.text == "/newroom")
    dp.message.register(list_rooms, F.text == "/list")

    dp.message.register(input_host, RoomState.host)
    dp.message.register(input_room, RoomState.room)
    dp.message.register(input_map, RoomState.map)
    dp.message.register(input_mode, RoomState.mode)

    dp.callback_query.register(handle_callback)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
